<!DOCTYPE html><html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Lavender Vibes</title>
  <style>
    body {
      margin: 0;
      font-family: 'Segoe UI', sans-serif;
      background: linear-gradient(to right, #e6e6fa, #d8bfd8);
      color: #4b0082;
      display: flex;
      justify-content: center;
      align-items: flex-start;
      min-height: 100vh;
      padding: 40px;
    }.playlist-container {
  background-color: #f8f0ff;
  border-radius: 20px;
  box-shadow: 0 4px 20px rgba(128, 0, 128, 0.2);
  padding: 30px;
  max-width: 600px;
  width: 100%;
  animation: fadeIn 1s ease-in-out;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

header h1 {
  text-align: center;
  color: #6a0dad;
  margin-bottom: 30px;
  transition: transform 0.3s ease-in-out;
}

header h1:hover {
  transform: scale(1.05);
}

.album {
  display: flex;
  align-items: center;
  margin-bottom: 25px;
  background-color: #ffffffb3;
  padding: 15px;
  border-radius: 15px;
  box-shadow: 0 2px 10px rgba(106, 90, 205, 0.2);
  transition: transform 0.3s, background 0.3s;
}

.album:hover {
  transform: scale(1.02);
  background-color: #f3eaff;
}

.album-art {
  width: 80px;
  height: 80px;
  border-radius: 10px;
  margin-right: 20px;
  transition: transform 0.3s ease-in-out;
}

.album-art:hover {
  transform: rotate(3deg) scale(1.05);
}

.album-info h2 {
  margin: 0;
  color: #4b0082;
  transition: color 0.3s;
}

.album-info p {
  margin: 5px 0;
  color: #9370db;
}

audio {
  width: 100%;
  margin-top: 10px;
}

canvas {
  display: block;
  margin: 20px auto 0;
  background-color: #e6e6fa;
  border-radius: 15px;
}

  </style>
</head>
<body>
  <div class="playlist-container">
    <header>
      <h1>âœ¨ Lavender Vibes Playlist</h1>
    </header><canvas id="visualizer" width="550" height="100"></canvas>

<!-- Example Albums -->
<section class="album">
  <img src="https://via.placeholder.com/150" alt="Album 1" class="album-art" />
  <div class="album-info">
    <h2>Starry Echoes</h2>
    <p>by Nyx</p>
    <audio id="audio-player" controls>
      <source src="music1.mp3" type="audio/mpeg">
      Your browser does not support the audio element.
    </audio>
  </div>
</section>

<section class="album">
  <img src="https://via.placeholder.com/150" alt="Album 2" class="album-art" />
  <div class="album-info">
    <h2>Moonlit Dreams</h2>
    <p>by Luma</p>
    <audio controls>
      <source src="music2.mp3" type="audio/mpeg">
      Your browser does not support the audio element.
    </audio>
  </div>
</section>

<section class="album">
  <img src="https://via.placeholder.com/150" alt="Album 3" class="album-art" />
  <div class="album-info">
    <h2>Lavender Skies</h2>
    <p>by Solace</p>
    <audio controls>
      <source src="music3.mp3" type="audio/mpeg">
      Your browser does not support the audio element.
    </audio>
  </div>
</section>

  </div>  <script>
    const canvas = document.getElementById('visualizer');
    const ctx = canvas.getContext('2d');
    const audio = document.getElementById('audio-player');

    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
    const analyser = audioCtx.createAnalyser();
    const source = audioCtx.createMediaElementSource(audio);
    source.connect(analyser);
    analyser.connect(audioCtx.destination);
    analyser.fftSize = 64;

    const bufferLength = analyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);

    function draw() {
      requestAnimationFrame(draw);
      analyser.getByteFrequencyData(dataArray);

      ctx.fillStyle = '#e6e6fa';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      const barWidth = (canvas.width / bufferLength) * 1.5;
      let x = 0;

      for (let i = 0; i < bufferLength; i++) {
        const barHeight = dataArray[i] * 0.7;
        ctx.fillStyle = `rgba(148, 0, 211, 0.7)`;
        ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);
        x += barWidth + 1;
      }
    }

    audio.onplay = () => {
      if (audioCtx.state === 'suspended') {
        audioCtx.resume();
      }
      draw();
    };
  </script></body>
</html>
